class Solution {
public:
    int longestPalindromeLength = 0;
    string palindrome;
    std::map<string, string> seenPalindromes;

    string longestPalindrome(string s) {
        int stringLength = s.length()

        if (stringLength == 0) return "";
        if (stringLength == 1) return s;
        
        for (int i = 0; i < s.length() - 1; i++) {
            searchForPalindromeLength(s, i, i)
        }
        
        return palindrome;
    }

    int searchForPalindromeLength(string & s, int left, int right) {
        int length = 0;
        while (left > 0 && right < s.length() && s[left] == s[right]) {
            left--;
            right++;
            length++;
        }
        return length;
    }

    /*
    void checkAndUpdatePalindrome(string & s) {
        if (isPalindrome(s) && isLongestSeenLength(s)) {
            updateLongestPalindrome(s);
        }
    }
    
    bool isLongestSeenLength(string & s) {
        return (s.length() > longestPalindromeLength);
    }
    
    bool isPalindrome(const string & s) {
        if (seenPalindromes.count(s)) {
            return true;
        }

        string reversedString(s.rbegin(), s.rend());
        if (s == reversedString) {
            seenPalindromes.insert({s, s});
            return true;
        }

        return false;
    }
    
    void updateLongestPalindrome(string & s) {
        longestPalindromeLength = s.length();
        palindrome.assign(s);
    }
    */
};